package secret

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

const (
	AnnotationSecretAutoGenerate    = "secret-generator.v1.mittwald.de/autogenerate"
	AnnotationSecretAutoGeneratedAt = "secret-generator.v1.mittwald.de/autogenerate-generated-at"
	AnnotationSecretRegenerate      = "secret-generator.v1.mittwald.de/regenerate"
	AnnotationSecretSecure          = "secret-generator.v1.mittwald.de/secure"
	AnnotationSecretType            = "secret-generator.v1.mittwald.de/type"
	AnnotationSecretLength          = "secret-generator.v1.mittwald.de/length"
	AnnotationBasicAuthUsername     = "secret-generator.v1.mittwald.de/basic-auth-username"
	AnnotationSecretEncoding        = "secret-generator.v1.mittwald.de/encoding"
	AnnotationSSHPrivateKeyField    = "secret-generator.v1.mittwald.de/private-key-field"
	AnnotationSSHPublicKeyField     = "secret-generator.v1.mittwald.de/public-key-field"
)

type Type string

const (
	TypeString     Type = "string"
	TypeSSHKeypair Type = "ssh-keypair"
	TypeBasicAuth  Type = "basic-auth"
)

func (st Type) Validate() error {
	switch st {
	case TypeString,
		TypeSSHKeypair,
		TypeBasicAuth:
		return nil
	}
	return fmt.Errorf("%s is not a valid secret type", st)
}

type Generator interface {
	generateData(*corev1.Secret) (reconcile.Result, error)
}

// ParseByteLength parses the given length string into an integer length and determines whether the byte-length-suffix was set.
// In case paring fails, or the string is empty, the fallback will be returned, along with false.
func ParseByteLength(fallback int, length string) (int, bool, error) {
	isByteLength := false

	lengthString := strings.ToLower(length)
	if len(lengthString) == 0 {
		return fallback, isByteLength, nil
	}

	if strings.HasSuffix(lengthString, ByteSuffix) {
		isByteLength = true
	}
	intVal, err := strconv.Atoi(strings.TrimSuffix(lengthString, ByteSuffix))
	if err != nil {
		return fallback, isByteLength, errors.WithStack(err)
	}
	secretLength := intVal

	return secretLength, isByteLength, nil
}
